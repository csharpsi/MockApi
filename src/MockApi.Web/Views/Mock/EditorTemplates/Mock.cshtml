@using MockApi.Web
@model MockApi.Web.Models.Mock
@Html.AntiForgeryToken()

<div class="col-md-12">

    <div class="form-group">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })    
    </div>

    <div class="form-group @Html.AddClassIfInvalid(x => x.Path)">
        @Html.LabelFor(x => x.Path, new {@class = "control-label"})
        @Html.TextBoxFor(x => x.Path, new {@class = "form-control"})
        @Html.ValidationMessageFor(x => x.Path, "", new {@class = "text-danger"})
    </div>



    <div class="form-group @Html.AddClassIfInvalid(x => x.Verb)">
        @Html.LabelFor(x => x.Verb, new {@class = "control-label"})
        @Html.DropDownListFor(x => x.Verb, Html.ListOfHttpMethods(Model.Verb), new {@class = "form-control"})
        @Html.ValidationMessageFor(x => x.Verb, "", new {@class = "text-danger"})
    </div>
    
    <div class="form-group">
        <div class="col-lg-12">
            <button type="submit" class="btn btn-success">Save</button>
            @if (!string.IsNullOrWhiteSpace(Model.Id?.ToString()))
            {
                @Html.ActionLink("Add new response", "NewResponse", new { id = Model.Id }, new { @class = "btn btn-primary" })
            }
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>

    <div class="clearfix"></div>
    <hr/>
    <div class="clearfix"></div>

    <div class="form-group">
        <h3>Responses</h3>

        @if (string.IsNullOrWhiteSpace(Model.Id?.ToString()))
        {
            <p>You can add responses once you have saved your new mock.</p>
        }
        else
        {
            if (!Model.Responses.Any())
            {
                <p>You haven't added any responses yet. @Html.ActionLink("Add your first response", "NewResponse", new { id = Model.Id })</p>
            }

            <table class="table table-striped table-hover">

                <tbody>

                    @foreach (var response in Model.Responses)
                {
                        <tr>
                            <td>
                                @if (Model.ActiveStatusCode == response.StatusCode)
                                {
                                    <span class="glyphicon glyphicon-ok"></span>
                                }

                                @Html.ActionLink(response.StatusCode.ToFriendlyString(), "EditResponse", new { id = Model.Id, code = (int)response.StatusCode })
                            </td>
                            <td>
                                @if (Model.ActiveStatusCode != response.StatusCode)
                                {
                                    @Html.ActionLink("Make this response the active status code", "MakeActive", new { id = Model.Id, code = (int)response.StatusCode })
                                }
                            </td>
                            <td>
                                <a href="@Url.Action("RemoveStatus", new {id = Model.Id, code = (int) response.StatusCode})" title="Remove @response.StatusCode.ToFriendlyString()">
                                    <span class="glyphicon glyphicon-trash"></span>
                                </a>
                            </td>
                        </tr>
                    }

                </tbody>

            </table>
        }
    </div>
</div>

